# ~/.bash_interactive: intended to be read and executed by bash for interactive
# shells.

# All commands in this file are intended for interactive shells, so don't do
# anything if not running interactively.
[ -z "$PS1" ] && return

# Restore the previously selected terminal color scheme or set the default
# terminal color scheme if the termcolors script is available.
if [ -x ~/.bin/termcolors ]; then
  if [ -r ~/.termcolors ]; then
    ~/.bin/termcolors $(head -1 ~/.termcolors)
  else
    ~/.bin/termcolors tomorrow-night
  fi
fi

# Check the window size after each command and if necessary update the values
# of LINES and COLUMNS.
shopt -s checkwinsize

# Do not modify the shell prompt in the virtual env activate script because the
# virtual env is already included in the prompt by code to set the prompt
# below.
VIRTUAL_ENV_DISABLE_PROMPT=1

# Function to set variables for use in the prompt.
jordy_prompt_command() {
  local exit_status=$?
  case $exit_status in
    0) JORDY_PROMPT_EXIT_STATUS="✔" ;; # u2714
    *) JORDY_PROMPT_EXIT_STATUS="✕" ;; # u2715
  esac
  JORDY_PROMPT_ENV=""
  if [ -n "$JORDY_ENV_PROMPT" ]; then
    JORDY_PROMPT_ENV+=" $JORDY_ENV_PROMPT"
  fi
  if [ -n "$VIRTUAL_ENV_PROMPT" ]; then
    JORDY_PROMPT_ENV+=" $VIRTUAL_ENV_PROMPT"
  fi
  JORDY_PROMPT_ENV="${JORDY_PROMPT_ENV# }"
  if [ -n "$JORDY_PROMPT_ENV" ]; then
    JORDY_PROMPT_ENV="($JORDY_PROMPT_ENV) "
  fi
}

# Append an entry to the $PROMPT_COMMAND variable.
jordy_append_to_prompt_command() {
  if [[ -n $PROMPT_COMMAND && $PROMPT_COMMAND != *"$1"* ]]; then
    PROMPT_COMMAND+="; $1"
  else
    PROMPT_COMMAND="$1"
  fi
}

# Append the jordy_prompt_command function to the $PROMPT_COMMAND variable so
# it is run just before the prompt is printed.
jordy_append_to_prompt_command "jordy_prompt_command"

# Set prompt to exit status time env username@hostname:workingdirectory.
PS1='$JORDY_PROMPT_EXIT_STATUS \t ${JORDY_PROMPT_ENV}\u@\h:\w\n\$ '

# If this is a GUI terminal set the title to username@hostname:workingdirectory.
case "$TERM" in
xterm*|rxvt*)
  PS1="\[\e]0;\u@\h:\w\a\]$PS1"
  ;;
*)
  ;;
esac

# If not running in posix mode enable programmable completion if available.
if ! shopt -oq posix; then
  if [ -r /etc/bash_completion ]; then
    source /etc/bash_completion
  elif which brew > /dev/null 2>&1 && [ -r $(brew --prefix)/etc/bash_completion ]; then
    source $(brew --prefix)/etc/bash_completion
  fi
  if [ -r ~/toolbox/share/ninja ]; then
    source ~/toolbox/share/ninja/bash-completion
  fi
fi

# Set the size of the history and history file to unlimited.
HISTSIZE=
HISTFILESIZE=

# Save all commands in the history.
HISTCONTROL=

# Prefix all commands in the output of the history builtin with the date and
# time.
HISTTIMEFORMAT="%F %T "

# Change the history file to a non default file to prevent it from being
# truncated by bash sessions that do not use these setings.
HISTFILE="$HOME/.bash_unlimited_history"

# Append to the history file instead of overwriting it.
shopt -s histappend

# Append the just executed command to the history file when displaying a new
# prompt.
jordy_append_to_prompt_command "history -a"

# Setup colors for ls using the dircolors command if available.
if [ -x /usr/bin/dircolors ]; then
  if [ -r ~/.dircolors ]; then
    eval "$(dircolors -b ~/.dircolors)"
  else
    eval "$(dircolors -b)"
  fi
fi

# Enable color output for ls and grep if supported.
if [ "$TERM" != "dumb" ]; then
  if ls -d --color=auto > /dev/null 2>&1; then
    alias ls='ls --color=auto'
  else
    alias ls='ls -G'
  fi
  alias grep='grep --color=auto'
  alias fgrep='fgrep --color=auto'
  alias egrep='egrep --color=auto'
fi

# Use lesspipe to make less more friendly for non-text input files if available.
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# Add some common aliases for ls.
alias ll='ls -alF'
alias la='ls -A'
alias l='ls -CF'

# Alias for managing dotfiles directly in $HOME using Git.
#
# To set up on a new machine:
# $ git clone --recurse-submodules --no-checkout <git-repo-url> tmp-dotfiles
# $ mv tmp-dotfiles/.git .dotfiles
# $ rm -rf tmp-dotfiles
# $ alias dotfiles='git --git-dir=$HOME/.dotfiles --work-tree=$HOME'
# $ dotfiles checkout
# $ dotfiles config status.showUntrackedFiles no
#
# Based on: https://www.atlassian.com/git/tutorials/dotfiles
alias dotfiles='git --git-dir=$HOME/.dotfiles --work-tree=$HOME'

# Source additional aliases from ~/.bash_aliases if it exists.
if [ -r ~/.bash_aliases ]; then
  source ~/.bash_aliases
fi
